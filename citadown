#!/usr/bin/env ruby

# == Synopsis 
# This is a simple CLI utility to download (BibTex) citations
# of known authors from DBLP.
#
# == Description
#    Here are some examples of how to use citadown:
#     citadown Matthew Might > might.bib
#     citadown --verbose Matthew Might > might.bib
#     citadown -V Filinski > filinski.bib
#
#    The DBLP citations often are very verbose and include details like
#    the page numbers (from the journal that the paper appeared in), the
#    source, the link to the electronic edition etc. citadown allows you
#    to define a set of tags that you would like to ignore and exclude from
#    the generated bibTex file. By default, it looks for a file .ignore in
#    the CWD for the keywords to ignore.
#
# == Usage 
#   citadown [options]
#
#   Options:
#   -h, --help          Display this help message
#   -V, --version       Display the version
#   -v, --verbose       Verbose output
#
# == Author
#   Abhishek Kulkarni
#
# == Copyright
#   Copyright (c) 2011 Abhishek Kulkarni. Licensed under the MIT License:
#   http://www.opensource.org/licenses/mit-license.php

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require 'optparse'
require 'rdoc/usage'
require 'ostruct'
require 'net/http'
require 'rexml/document'

class App
  VERSION = '0.1.4'
  DBLP_SERVER = "http://dblp.uni-trier.de/rec/"
  DBLP_AUTHORS = DBLP_SERVER + "pers/"
  DBLP_BIBTEX = DBLP_SERVER + "bibtex/"
  attr_reader :options
  attr_accessor :authors

  def initialize(arguments, stdin)
    @arguments = arguments
    @stdin = stdin
    
    @options = OpenStruct.new
    @options.verbose = false
    @authors = []
  end

  def run
    if parsed_options? && arguments_valid?
      process_args
    else
      output_usage
    end
  end

  protected
  def parsed_options?    
    # Specify options
    opts = OptionParser.new 
    opts.on('-V', '--version')    { output_version ; exit 0 }
    opts.on('-h', '--help')       { output_help }
    opts.on('-v', '--verbose')    { @options.verbose = true }

    opts.parse!(@arguments) rescue return false
    true
  end

  # True if required arguments were provided
  def arguments_valid?
    true if @arguments.length >= 1
  end

  def output_help
    output_version
    RDoc::usage()
  end
  
  def output_usage
    RDoc::usage('usage')
  end
  
  def output_version
    puts "#{File.basename(__FILE__)} v#{VERSION}"
  end
  
  def process_args
    if @arguments.length == 1
      author = @arguments[0] + ":"
    elsif @arguments.length == 2
      author = @arguments[1] + ":" + @arguments[0]
      author = @arguments[0] + ":" + @arguments[1]
    elsif @arguments.length == 3
      author = @arguments[2] + ":" + @arguments[0] + "_" + @arguments[1]
      author = @arguments[2] + ":" + @arguments[0] + "=" + @arguments[1]
      author = @arguments[1] + "=" + @arguments[2] + ":" + @arguments[0]
    end
    @authors << author.gsub(/[\.\-]/, '=')
    @authors.each { |a| get_keys(a) }
  end

  def get_keys(author)
    puts "Checking citations for author #{author}." if @options.verbose
    url = DBLP_AUTHORS + author[0].chr.downcase
    url += "/" + author + "/xk"
    puts "URL: #{url}" if @options.verbose

    # get the XML data as a string
    xml_data = Net::HTTP.get_response(URI.parse(url)).body

    doc = REXML::Document.new(xml_data)
    dblpkeys = []
    doc.elements.each('dblpperson/dblpkey') do |e|
      dblpkeys << e.text
    end

    bibentries = []
    dblpkeys.each do |key|
      data = Net::HTTP.get_response(URI.parse("#{DBLP_BIBTEX}#{key}")).body
      entry = $1 if data =~ /<pre>(.*?)<\/pre>/m
      bibentries << entry.gsub(/<a[^>]*>/m, '').gsub(/<\/a>/m, '')
    end
    print_entries(bibentries)
  end

  def print_entries(entries)
    if File.exists?(".ignore")
      ignore_entries = File.open(".ignore", "r") { |f| f.read }
      entries.each do |entry|
        entry.each_line do |e|
          ignore = false
          ignore_entries.each do |ie|
            ignore = true if e =~ /^\s*#{ie.chomp}\s*=/
          end
          print e if not ignore
        end
      end
    else
      print entries
    end
  end
end

app = App.new(ARGV, STDIN)
app.run
