#!/usr/bin/env ruby

# == Synopsis 
# This is a simple CLI utility to download (BibTex) citations
# of known authors from DBLP.
#
# == Description
#    Here are some examples of how to use citadown:
#     citadown Matthew Might > might.bib
#     citadown --verbose Matthew Might > might.bib
#     citadown -V Filinski > filinski.bib
#
#    The DBLP citations often are very verbose and include details like
#    the page numbers (from the journal that the paper appeared in), the
#    source, the link to the electronic edition etc. citadown allows you
#    to define a set of tags that you would like to ignore and exclude from
#    the generated bibTex file. By default, it looks for a file .ignore in
#    the CWD for the keywords to ignore.
#
# == Usage 
#   citadown [options]
#
#   Options:
#   -h, --help          Display this help message
#   -V, --version       Display the version
#   -v, --verbose       Verbose output
#
# == Author
#   Abhishek Kulkarni
#
# == Copyright
#   Copyright (c) 2011 Abhishek Kulkarni. Licensed under the MIT License:
#   http://www.opensource.org/licenses/mit-license.php

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require 'optparse'
require 'rdoc/usage'
require 'ostruct'
require 'net/http'
require 'rexml/document'

class App
  VERSION = '0.1.4'
  DBLP_SERVER = "http://dblp.uni-trier.de/"
  DBLP_DB = DBLP_SERVER + "db/indices/a-tree/"
  DBLP_AUTHORS = DBLP_SERVER + "rec/pers/"
  DBLP_BIBTEX = DBLP_SERVER + "rec/bibtex/"
  attr_reader :options
  attr_accessor :authors

  def initialize(arguments, stdin)
    @arguments = arguments
    @stdin = stdin
    
    @options = OpenStruct.new
    @options.verbose = false
  end

  def run
    if parsed_options? && arguments_valid?
      process_args
    else
      output_usage
    end
  end

  protected
  def parsed_options?    
    # Specify options
    opts = OptionParser.new 
    opts.on('-V', '--version')    { output_version ; exit 0 }
    opts.on('-h', '--help')       { output_help }
    opts.on('-v', '--verbose')    { @options.verbose = true }

    opts.parse!(@arguments) rescue return false
    true
  end

  # True if required arguments were provided
  def arguments_valid?
    true if @arguments.length >= 1
  end

  def output_help
    output_version
    RDoc::usage()
  end
  
  def output_usage
    RDoc::usage('usage')
  end
  
  def output_version
    puts "#{File.basename(__FILE__)} v#{VERSION}"
  end
  
  def process_args
    url = DBLP_SERVER + "search/author/"
    url += URI.escape(@arguments.join(" "))

    content = Net::HTTP.get_response(URI.parse(url))
    case content
    when Net::HTTPSuccess
      authors = []
      result = content.body
      result.each_line do |line|
        authors << $1 if line =~ /<li><a[^>]*>(.*?)<\/a><\/li>/
      end
      select_author(authors)
    when Net::HTTPRedirection
      author = $1 if content['location'] =~ /^#{DBLP_DB}(.+)\.html$/
      keys = get_keys(author)
      keys.each {|key| print get_bibtex(key)}
    else
      content.error!
    end
  end

  def select_author(authors)
    puts "Did you mean?"
    print authors.join("\n")
  end

  def get_keys(author)
    puts "% Downloading citations for author #{author}." if @options.verbose
    url = DBLP_AUTHORS + author + "/xk"
    puts "% URL: #{url}" if @options.verbose

    publications = Net::HTTP.get_response(URI.parse(url)).body

    doc = REXML::Document.new(publications)
    dblpkeys = []
    doc.elements.each('dblpperson/dblpkey') do |e|
      dblpkeys << e.text
    end
    return dblpkeys
  end

  def get_bibtex(key)
    bibentries = []
    data = Net::HTTP.get_response(URI.parse("#{DBLP_BIBTEX}#{key}")).body
    entry = $1 if data =~ /<pre>(.*)<\/pre>/m
    bibentries << entry.gsub(/<(\w+)[^>]*>/m, '').gsub(/<\/\w+>/m, '')
    return bibentries
  end

  def print_entries(entries)
    if File.exists?(".ignore")
      ignore_entries = File.open(".ignore", "r") { |f| f.read }
      entries.each do |entry|
        entry.each_line do |e|
          ignore = false
          ignore_entries.each do |ie|
            ignore = true if e =~ /^\s*#{ie.chomp}\s*=/
          end
          print e if not ignore
        end
      end
    else
      print entries
    end
  end
end

app = App.new(ARGV, STDIN)
app.run
